package es.uji.al259348.sliwwebmanager.controllers;

import es.uji.al259348.sliwwebmanager.model.Device;
import es.uji.al259348.sliwwebmanager.model.User;
import es.uji.al259348.sliwwebmanager.model.forms.DeviceForm;
import es.uji.al259348.sliwwebmanager.model.forms.EditDeviceForm;
import es.uji.al259348.sliwwebmanager.services.DeviceService;
import es.uji.al259348.sliwwebmanager.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;
import java.util.UUID;

@Controller
@RequestMapping(path = "devices")
public class DevicesController {

    @Autowired
    DeviceService deviceService;

    @Autowired
    UserService userService;

    @RequestMapping
    public String list(Model model,
                       @RequestParam(required = false, defaultValue = "1") Integer page,
                       @RequestParam(required = false, defaultValue = "10") Integer size,
                       @RequestParam(required = false, defaultValue = "id,asc") String sort,
                       @RequestParam(required = false, defaultValue = "") String filter) {

        String[] sortd = sort.split(",");
        String propertie = sortd[0];
        String direction = sortd[1];

        Pageable pageable = new PageRequest(page-1, size, Sort.Direction.fromString(direction), propertie);

        Page<Device> devicePage;
        if (filter.isEmpty())
            devicePage = deviceService.findAll(pageable);
        else
            devicePage = deviceService.findByMacAndNameWithHighlight(pageable, filter);

        model.addAttribute("devicePage", devicePage);
        model.addAttribute("filter", filter);

        return "devices/list";
    }

    @RequestMapping(path = "create")
    public String create(Model model) {

        String autoGeneratedId = UUID.randomUUID().toString();

        DeviceForm deviceForm = new DeviceForm();
        deviceForm.setId(autoGeneratedId);

        model.addAttribute("deviceForm", deviceForm);

        return "devices/create";
    }

    @RequestMapping(path = "create", method = RequestMethod.POST)
    public String create(@Valid DeviceForm deviceForm, BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            return "devices/create";
        }

        Device device = deviceForm.getDevice();
        System.out.println(device);

        deviceService.save(device);

        return "redirect:/devices";
    }

    @RequestMapping(path = "{id}")
    public String view(Model model,
                       RedirectAttributes redirectAttributes,
                       @PathVariable String id) {

        Device device = deviceService.findOne(id);
        if (device == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el dispositivo con identificador: " + id);
            return "redirect:/devices";
        }

        model.addAttribute("device", device);

        return "devices/view";
    }

    @RequestMapping(path = "{id}/edit")
    public String edit(Model model,
                       RedirectAttributes redirectAttributes,
                       @PathVariable String id) {

        Device device = deviceService.findOne(id);
        if (device == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el dispositivo con identificador: " + id);
            return "redirect:/devices";
        }

        model.addAttribute("device", device);

        EditDeviceForm editDeviceForm = new EditDeviceForm(device);
        model.addAttribute("editDeviceForm", editDeviceForm);

        return "devices/edit";
    }

    @RequestMapping(path = "{id}/edit", method = RequestMethod.POST)
    public String editAction(Model model,
                             RedirectAttributes redirectAttributes,
                             @PathVariable String id,
                             @Valid EditDeviceForm editDeviceForm,
                             BindingResult bindingResult) {

        Device device = deviceService.findOne(id);
        if (device == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el dispositivo con identificador: " + id);
            return "redirect:/devices";
        }

        model.addAttribute("device", device);

        if (bindingResult.hasErrors()) {
            return "devices/edit";
        }

        editDeviceForm.update(device);
        deviceService.save(device);
        redirectAttributes.addFlashAttribute("success", "El dispositivo ha sido actualizado correctamente.");

        return "redirect:/devices/" + id;
    }

    @RequestMapping(path = "{id}/linkUser")
    public String linkUser(Model model,
                           RedirectAttributes redirectAttributes,
                           @PathVariable String id,
                           @RequestParam(required = false, defaultValue = "1") Integer page,
                           @RequestParam(required = false, defaultValue = "10") Integer size,
                           @RequestParam(required = false, defaultValue = "id,asc") String sort,
                           @RequestParam(required = false, defaultValue = "") String filter) {

        Device device = deviceService.findOne(id);
        if (device == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el dispositivo con identificador: " + id);
            return "redirect:/devices";
        }

        String[] sortd = sort.split(",");
        String propertie = sortd[0];
        String direction = sortd[1];

        Pageable pageable = new PageRequest(page-1, size, Sort.Direction.fromString(direction), propertie);

        Page<User> userPage;
        if (filter.isEmpty())
            userPage = userService.findAll(pageable);
        else
            userPage = userService.findByNameWithHighlight(pageable, filter);

        model.addAttribute("userPage", userPage);
        model.addAttribute("filter", filter);
        model.addAttribute("device", device);

        return "devices/linkUser";
    }

    @RequestMapping(path = "{deviceId}/linkUser", method = RequestMethod.POST)
    public String linkUser(RedirectAttributes redirectAttributes,
                           @PathVariable String deviceId,
                           @RequestParam String userId) {

        Device device = deviceService.findOne(deviceId);
        if (device == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el dispositivo con identificador: " + deviceId);
            return "redirect:/devices";
        }

        User user = userService.findOne(userId);
        if (user == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el usuario con identificador: " + userId);
            return "redirect:/devices/" + deviceId;
        }

        device.setUser(user);
        deviceService.save(device);
        redirectAttributes.addFlashAttribute("success", "Ha sido vinculado el usuario con identificador: " + userId);

        return "redirect:/devices/" + deviceId;
    }

    @RequestMapping(path = "{deviceId}/unlinkUser")
    public String linkUser(RedirectAttributes redirectAttributes,
                           @PathVariable String deviceId) {

        Device device = deviceService.findOne(deviceId);
        if (device == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el dispositivo con identificador: " + deviceId);
            return "redirect:/devices";
        }

        User currentUser = device.getUser();
        if (currentUser == null) {
            redirectAttributes.addFlashAttribute("error", "El dispositivo no tiene ning√∫n usuario vinculado.");
            return "redirect:/devices/" + deviceId;
        }

        device.setUser(null);
        deviceService.save(device);
        redirectAttributes.addFlashAttribute("success", "Ha sido desvinculado el usuario con identificador: " + currentUser.getId());

        return "redirect:/devices/" + deviceId;
    }

}
