package es.uji.al259348.sliwwebmanager.controllers;

import es.uji.al259348.sliwwebmanager.model.User;
import es.uji.al259348.sliwwebmanager.model.forms.EditUserForm;
import es.uji.al259348.sliwwebmanager.model.forms.UserForm;
import es.uji.al259348.sliwwebmanager.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;
import java.util.UUID;

@Controller
@RequestMapping(path = "users")
public class UsersController {

    @Autowired
    UserService userService;

    @RequestMapping
    public String list(Model model,
                       @RequestParam(required = false, defaultValue = "1") Integer page,
                       @RequestParam(required = false, defaultValue = "10") Integer size,
                       @RequestParam(required = false, defaultValue = "id,asc") String sort,
                       @RequestParam(required = false, defaultValue = "") String filter) {

        String[] sortd = sort.split(",");
        String propertie = sortd[0];
        String direction = sortd[1];

        Pageable pageable = new PageRequest(page-1, size, Sort.Direction.fromString(direction), propertie);

        Page<User> userPage;
        if (filter.isEmpty())
            userPage = userService.findAll(pageable);
        else
            userPage = userService.findByNameWithHighlight(pageable, filter);

        model.addAttribute("userPage", userPage);
        model.addAttribute("filter", filter);

        return "users/list";
    }

    @RequestMapping(path = "create")
    public String create(Model model) {

        String autoGeneratedId = UUID.randomUUID().toString();

        UserForm userForm = new UserForm();
        userForm.setId(autoGeneratedId);

        model.addAttribute("userForm", userForm);

        return "users/create";
    }

    @RequestMapping(path = "create", method = RequestMethod.POST)
    public String create(@Valid UserForm userForm, BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            return "users/create";
        }

        User user = userForm.getUser();
        System.out.println(user);

        userService.save(user);

        return "redirect:/users";
    }

    @RequestMapping(path = "{id}")
    public String view(Model model,
                       RedirectAttributes redirectAttributes,
                       @PathVariable String id) {

        User user = userService.findOne(id);
        if (user == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el usuario con identificador: " + id);
            return "redirect:/users";
        }

        model.addAttribute("user", user);

        return "users/view";
    }

    @RequestMapping(path = "{id}/edit")
    public String edit(Model model,
                       RedirectAttributes redirectAttributes,
                       @PathVariable String id) {

        User user = userService.findOne(id);
        if (user == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el usuario con identificador: " + id);
            return "redirect:/users";
        }

        model.addAttribute("user", user);

        EditUserForm editUserForm = new EditUserForm(user);
        model.addAttribute("editUserForm", editUserForm);

        return "users/edit";
    }

    @RequestMapping(path = "{id}/edit", method = RequestMethod.POST)
    public String editAction(Model model,
                             RedirectAttributes redirectAttributes,
                             @PathVariable String id,
                             @Valid EditUserForm editUserForm,
                             BindingResult bindingResult) {

        User user = userService.findOne(id);
        if (user == null) {
            redirectAttributes.addFlashAttribute("error", "No existe el usuario con identificador: " + id);
            return "redirect:/users";
        }

        model.addAttribute("user", user);

        if (bindingResult.hasErrors()) {
            return "users/edit";
        }

        editUserForm.update(user);
        userService.save(user);
        redirectAttributes.addFlashAttribute("success", "El usuario ha sido actualizado correctamente.");

        return "redirect:/users/" + id;
    }

}
